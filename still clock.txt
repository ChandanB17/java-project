import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.Calendar;

import javax.swing.JComponent;

public class StillClock extends JComponent {

    protected int hour;
    protected int minute;
    protected int second;

    public StillClock() {
        setCurrentTime();
    }

    public void setCurrentTime() {
        // Get the current time from the system clock
        Calendar now = Calendar.getInstance();
        hour = now.get(Calendar.HOUR_OF_DAY);
        minute = now.get(Calendar.MINUTE);
        second = now.get(Calendar.SECOND);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(200, 200);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Get clock dimensions
        int clockRadius = (int)(Math.min(getWidth(), getHeight()) * 0.8 * 0.5);
        int xCenter = getWidth()/2;
        int yCenter = getHeight()/2;

        // Draw clock face
        g.setColor(Color.BLACK);
        g.drawOval(xCenter - clockRadius, yCenter - clockRadius, 2 * clockRadius, 2 * clockRadius);
        g.drawString("12", xCenter - 5, yCenter - clockRadius + 12);
        g.drawString("9", xCenter - clockRadius + 3, yCenter + 5);
        g.drawString("3", xCenter + clockRadius - 10, yCenter + 3);
        g.drawString("6", xCenter - 3, yCenter + clockRadius - 3);

        // Draw clock hands
        int sLength = (int)(clockRadius * 0.8);
        int xm = (int)(xCenter + sLength * Math.sin(second * (2 * Math.PI / 60)));
        int ym = (int)(yCenter - sLength * Math.cos(second * (2 * Math.PI / 60)));
        g.setColor(Color.RED);
        g.drawLine(xCenter, yCenter, xm, ym);

        int mLength = (int)(clockRadius * 0.65);
        int xh = (int)(xCenter + mLength * Math.sin(minute * (2 * Math.PI / 60)));
        int yh = (int)(yCenter - mLength * Math.cos(minute * (2 * Math.PI / 60)));
        g.setColor(Color.BLUE);
        g.drawLine(xCenter, yCenter, xh, yh);

        int hLength = (int)(clockRadius * 0.5);
        int xh2 = (int)(xCenter + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        int yh2 = (int)(yCenter - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        g.setColor(Color.GREEN);
        g.drawLine(xCenter, yCenter, xh2, yh2);
    }
}
